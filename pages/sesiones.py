import streamlit as st
import pandas as pd
import random
from datetime import datetime, date, timedelta

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Sesiones",
    page_icon="üìÖ",
    layout="wide"
)

# CSS personalizado con la paleta de colores
st.markdown("""
<style>
    /* Variables de colores */
    :root {
        --primary-dark: #001d4a;
        --primary-medium: #508ca4;
        --primary-light: #e2e2e2;
        --background-accent: #c2bdb6;
    }
    
    /* Fondo general */
    .main .block-container {
        background-color: var(--primary-light);
        padding: 2rem 1rem;
    }
    
    /* Estilo del t√≠tulo principal */
    .title-container {
        background-color: #c2bdb6;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 29, 74, 0.1);
    }
    
    .title-text {
        color: #001d4a;
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    
    /* Botones principales */
    .stButton > button {
        background-color: #001d4a !important;
        color: white !important;
        border: none !important;
        border-radius: 8px !important;
        font-weight: bold !important;
        transition: all 0.3s ease !important;
    }
    
    .stButton > button:hover {
        background-color: #508ca4 !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 8px rgba(0, 29, 74, 0.3) !important;
    }
    
    /* Formularios */
    .stForm {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        border: 2px solid #508ca4;
        box-shadow: 0 4px 6px rgba(80, 140, 164, 0.2);
    }
    
    /* Inputs de texto */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea,
    .stSelectbox > div > div > select {
        border: 2px solid #508ca4 !important;
        border-radius: 5px !important;
        background-color: white !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus,
    .stSelectbox > div > div > select:focus {
        border-color: #001d4a !important;
        box-shadow: 0 0 0 2px rgba(0, 29, 74, 0.2) !important;
    }
    
    /* Labels */
    .stTextInput > label,
    .stTextArea > label,
    .stSelectbox > label {
        color: #001d4a !important;
        font-weight: bold !important;
    }
    
    /* M√©tricas */
    .metric-container > div {
        background-color: white;
        border: 2px solid #508ca4;
        border-radius: 8px;
        padding: 1rem;
    }
    
    .metric-container [data-testid="metric-container"] {
        background-color: white;
        border: 2px solid #508ca4;
        border-radius: 8px;
        padding: 1rem;
    }
    
    /* Dataframe */
    .stDataFrame {
        border: 2px solid #508ca4;
        border-radius: 8px;
        overflow: hidden;
    }
    
    /* Mensajes de alerta */
    .stAlert {
        border-radius: 8px;
    }
    
    .stSuccess {
        background-color: rgba(80, 140, 164, 0.1);
        border: 1px solid #508ca4;
        color: #001d4a;
    }
    
    .stError {
        background-color: rgba(0, 29, 74, 0.1);
        border: 1px solid #001d4a;
        color: #001d4a;
    }
    
    .stInfo {
        background-color: rgba(80, 140, 164, 0.1);
        border: 1px solid #508ca4;
        color: #001d4a;
    }
    
    .stWarning {
        background-color: rgba(194, 189, 182, 0.3);
        border: 1px solid #c2bdb6;
        color: #001d4a;
    }
    
    /* Subt√≠tulos */
    h3 {
        color: #001d4a !important;
        border-bottom: 2px solid #508ca4;
        padding-bottom: 0.5rem;
    }
    
    h4 {
        color: #001d4a !important;
    }
    
    /* Sidebar si se usa */
    .css-1d391kg {
        background-color: #001d4a;
    }
    
    /* Separadores */
    hr {
        border-color: #508ca4 !important;
        border-width: 2px !important;
    }
    
    /* Pr√≥ximo turno card */
    .proximo-turno-card {
        background-color: white;
        border: 2px solid #508ca4;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(80, 140, 164, 0.2);
    }
    
    .proximo-turno-title {
        color: #001d4a;
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .turno-info {
        color: #001d4a;
        font-size: 1rem;
        margin: 0.5rem 0;
    }
    
    .turno-paciente {
        color: #508ca4;
        font-weight: bold;
        font-size: 1.1rem;
    }
    
    /* Radio buttons personalizados */
    .stRadio > div {
        background-color: rgba(80, 140, 164, 0.1);
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #508ca4;
    }
</style>
""", unsafe_allow_html=True)

# Inicializar datos de ejemplo si no existen en session_state
if 'sesiones' not in st.session_state:
    st.session_state.sesiones = pd.DataFrame({
        'ID_Sesion': [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010],
        'DNI_Paciente': ['37245687', '35784125', '24896532', '40125456', '30254863', '38756921', '20154789', '37654128', '32455701', '42145789'],
        'Nombre_Paciente': [
            'Mar√≠a Garc√≠a L√≥pez',
            'Juan Carlos P√©rez',
            'Ana Sof√≠a Mart√≠nez',
            'Roberto Luis Gonz√°lez',
            'Carmen Elena Rodr√≠guez',
            'Diego Alejandro Torres',
            'Luc√≠a Isabel Fern√°ndez',
            'Miguel √Ångel Ruiz',
            'Valentina Jos√© Silva',
            'Fernando David Castro'
        ],
        'Fecha_Sesion': ['2024-01-15', '2024-01-16', '2024-01-17', '2024-01-18', '2024-01-19', '2024-01-22', '2024-01-23', '2024-01-24', '2024-01-25', '2024-01-26'],
        'Asistencia': ['Presente', 'Presente', 'Ausente', 'Presente', 'Presente', 'Ausente', 'Presente', 'Presente', 'Presente', 'Ausente'],
        'Notas_Sesion': [
            'Paciente mostr√≥ mejoras significativas en el manejo de la ansiedad. Se trabaj√≥ con t√©cnicas de respiraci√≥n.',
            'Sesi√≥n enfocada en terapia cognitivo-conductual. Paciente receptivo a las t√©cnicas propuestas.',
            'Paciente no asisti√≥. Se reprogram√≥ la cita.',
            'Evaluaci√≥n inicial completa. Se establecieron objetivos terap√©uticos claros.',
            'Seguimiento de progreso. Paciente reporta mejor calidad de sue√±o.',
            'Paciente cancel√≥ con anticipaci√≥n debido a compromisos laborales.',
            'Trabajo en autoestima y confianza personal. Ejercicios de visualizaci√≥n.',
            'Sesi√≥n de seguimiento. Se ajust√≥ el plan terap√©utico seg√∫n evoluci√≥n.',
            'Primera sesi√≥n. Establecimiento de rapport y evaluaci√≥n inicial.',
            'Paciente no se present√≥ sin aviso previo.'
        ],
        'Diagnostico_Sesion': [
            'Progreso positivo - Reducci√≥n de s√≠ntomas ansiosos',
            'Evoluci√≥n favorable - Mayor insight',
            'No evaluado - Ausencia',
            'Diagn√≥stico inicial - Trastorno adaptativo',
            'Mejora notable - S√≠ntomas controlados',
            'No evaluado - Ausencia justificada',
            'Progreso gradual - Trabajar autoestima',
            'Estable - Continuar tratamiento actual',
            'Evaluaci√≥n inicial - Definir plan',
            'No evaluado - Ausencia sin aviso'
        ]
    })

# Datos del pr√≥ximo turno
if 'proximo_turno' not in st.session_state:
    proximo_turno_fecha = datetime.now() + timedelta(days=1)
    st.session_state.proximo_turno = {
        'dia': proximo_turno_fecha.strftime('%A'),
        'fecha': proximo_turno_fecha.strftime('%d/%m/%Y'),
        'horario': '15:30',
        'paciente': 'Isabella Victoria Restrepo'
    }

# Funci√≥n para traducir d√≠as al espa√±ol
def traducir_dia(dia_ingles):
    dias = {
        'Monday': 'Lunes',
        'Tuesday': 'Martes',
        'Wednesday': 'Mi√©rcoles',
        'Thursday': 'Jueves',
        'Friday': 'Viernes',
        'Saturday': 'S√°bado',
        'Sunday': 'Domingo'
    }
    return dias.get(dia_ingles, dia_ingles)

# T√≠tulo principal con fondo personalizado
st.markdown("""
<div class="title-container">
    <h1 class="title-text">üìÖ Sesiones</h1>
</div>
""", unsafe_allow_html=True)

# Bot√≥n para nueva sesi√≥n
col1, col2 = st.columns([1, 4])
with col1:
    if st.button("‚ûï Iniciar nueva sesi√≥n", type="primary", use_container_width=True):
        st.session_state.show_form = not st.session_state.get('show_form', False)

# Mostrar el formulario si el bot√≥n fue presionado
if st.session_state.get('show_form', False):
    st.markdown("### üìù Iniciar una nueva sesi√≥n")
    
    with st.form("nueva_sesion_form", clear_on_submit=True):
        # Selector de paciente
        pacientes_disponibles = [
            'Mar√≠a Garc√≠a L√≥pez - DNI: 37245687',
            'Juan Carlos P√©rez - DNI: 35784125',
            'Ana Sof√≠a Mart√≠nez - DNI: 24896532',
            'Roberto Luis Gonz√°lez - DNI: 40125456',
            'Carmen Elena Rodr√≠guez - DNI: 30254863',
            'Diego Alejandro Torres - DNI: 38756921',
            'Luc√≠a Isabel Fern√°ndez - DNI: 20154789',
            'Miguel √Ångel Ruiz - DNI: 37654128',
            'Valentina Jos√© Silva - DNI: 32455701',
            'Fernando David Castro - DNI: 42145789'
        ]
        
        paciente_seleccionado = st.selectbox(
            "Seleccionar Paciente *",
            [""] + pacientes_disponibles,
            help="Seleccione el paciente para la sesi√≥n"
        )
        
        fecha_sesion = st.date_input(
            "Fecha de la Sesi√≥n *",
            value=date.today(),
            help="Seleccione la fecha de la sesi√≥n"
        )
        
        st.markdown("#### üìù Notas de la sesi√≥n")
        notas_sesion = st.text_area(
            "",
            placeholder="Escriba aqu√≠ las notas detalladas de la sesi√≥n...",
            height=150,
            help="Registre observaciones, t√©cnicas aplicadas, respuesta del paciente, etc."
        )
        
        st.markdown("#### üë§ Asistencia")
        asistencia = st.radio(
            "",
            ["Presente", "Ausente"],
            help="Indique si el paciente asisti√≥ a la sesi√≥n"
        )
        
        st.markdown("#### ü©∫ Diagn√≥stico general de la sesi√≥n")
        diagnostico_sesion = st.text_input(
            "",
            placeholder="Ej: Progreso positivo, sin cambios, requiere ajuste...",
            help="Resumen del estado y evoluci√≥n del paciente en esta sesi√≥n"
        )
        
        # Bot√≥n para guardar
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ Guardar Sesi√≥n", type="primary")
        
        with col2:
            cancelled = st.form_submit_button("‚ùå Cancelar")
        
        # Procesar el formulario
        if submitted:
            if paciente_seleccionado and notas_sesion and diagnostico_sesion:
                # Extraer DNI y nombre del paciente seleccionado
                nombre_paciente = paciente_seleccionado.split(' - DNI:')[0]
                dni_paciente = paciente_seleccionado.split('DNI: ')[1]
                
                # Generar ID √∫nico para la sesi√≥n
                nuevo_id = max(st.session_state.sesiones['ID_Sesion']) + 1 if len(st.session_state.sesiones) > 0 else 1001
                
                # Crear nueva fila
                nueva_fila = pd.DataFrame({
                    'ID_Sesion': [nuevo_id],
                    'DNI_Paciente': [dni_paciente],
                    'Nombre_Paciente': [nombre_paciente],
                    'Fecha_Sesion': [fecha_sesion.strftime('%Y-%m-%d')],
                    'Asistencia': [asistencia],
                    'Notas_Sesion': [notas_sesion],
                    'Diagnostico_Sesion': [diagnostico_sesion]
                })
                
                # Agregar a la tabla
                st.session_state.sesiones = pd.concat([
                    st.session_state.sesiones, 
                    nueva_fila
                ], ignore_index=True)
                
                st.success("‚úÖ ¬°Sesi√≥n guardada exitosamente!")
                st.session_state.show_form = False
                st.rerun()
            else:
                st.error("‚ö†Ô∏è Por favor, complete todos los campos obligatorios.")
        
        if cancelled:
            st.session_state.show_form = False
            st.rerun()

# Mostrar la tabla de sesiones
st.markdown("### üìã Sesiones Registradas")

# Estad√≠sticas r√°pidas
st.markdown('<div class="metric-container">', unsafe_allow_html=True)
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Total de Sesiones", len(st.session_state.sesiones))
with col2:
    sesiones_presentes = len(st.session_state.sesiones[st.session_state.sesiones['Asistencia'] == 'Presente'])
    st.metric("Sesiones Presentes", sesiones_presentes)
with col3:
    sesiones_ausentes = len(st.session_state.sesiones[st.session_state.sesiones['Asistencia'] == 'Ausente'])
    st.metric("Sesiones Ausentes", sesiones_ausentes)
with col4:
    if len(st.session_state.sesiones) > 0:
        porcentaje_asistencia = round((sesiones_presentes / len(st.session_state.sesiones)) * 100, 1)
        st.metric("% Asistencia", f"{porcentaje_asistencia}%")
    else:
        st.metric("% Asistencia", "0%")
st.markdown('</div>', unsafe_allow_html=True)

# Filtros opcionales
st.markdown("#### üîç Filtros")
col1, col2, col3 = st.columns(3)

with col1:
    filtro_paciente = st.text_input("Buscar por nombre o DNI", placeholder="Ingrese nombre o DNI")

with col2:
    filtro_asistencia = st.selectbox(
        "Filtrar por asistencia",
        ["Todos", "Presente", "Ausente"]
    )

with col3:
    filtro_fecha = st.date_input("Filtrar por fecha", value=None)

# Aplicar filtros
df_filtrado = st.session_state.sesiones.copy()

if filtro_paciente:
    df_filtrado = df_filtrado[
        df_filtrado['Nombre_Paciente'].str.contains(filtro_paciente, case=False, na=False) |
        df_filtrado['DNI_Paciente'].str.contains(filtro_paciente, na=False)
    ]

if filtro_asistencia != "Todos":
    df_filtrado = df_filtrado[df_filtrado['Asistencia'] == filtro_asistencia]

if filtro_fecha:
    df_filtrado = df_filtrado[df_filtrado['Fecha_Sesion'] == filtro_fecha.strftime('%Y-%m-%d')]

# Configurar la visualizaci√≥n de la tabla
st.dataframe(
    df_filtrado,
    use_container_width=True,
    hide_index=True,
    column_config={
        "ID_Sesion": st.column_config.NumberColumn(
            "ID Sesi√≥n",
            help="Identificador √∫nico de la sesi√≥n",
            format="%d"
        ),
        "DNI_Paciente": st.column_config.TextColumn(
            "DNI",
            help="DNI del paciente",
            max_chars=50
        ),
        "Nombre_Paciente": st.column_config.TextColumn(
            "Paciente",
            help="Nombre del paciente",
            max_chars=100
        ),
        "Fecha_Sesion": st.column_config.DateColumn(
            "Fecha",
            help="Fecha de la sesi√≥n",
            format="DD/MM/YYYY"
        ),
        "Asistencia": st.column_config.TextColumn(
            "Asistencia",
            help="Asistencia del paciente"
        ),
        "Notas_Sesion": st.column_config.TextColumn(
            "Notas",
            help="Notas de la sesi√≥n",
            max_chars=200
        ),
        "Diagnostico_Sesion": st.column_config.TextColumn(
            "Diagn√≥stico",
            help="Diagn√≥stico de la sesi√≥n",
            max_chars=150
        )
    },
    height=400
)

# Pr√≥ximo turno
st.markdown("---")
st.markdown("""
<div class="proximo-turno-card">
    <div class="proximo-turno-title">üìÖ Pr√≥ximo Turno</div>
    <div class="turno-info"><strong>D√≠a:</strong> {}</div>
    <div class="turno-info"><strong>Fecha:</strong> {}</div>
    <div class="turno-info"><strong>Horario:</strong> {}</div>
    <div class="turno-info"><strong>Paciente:</strong> <span class="turno-paciente">{}</span></div>
</div>
""".format(
    traducir_dia(st.session_state.proximo_turno['dia']),
    st.session_state.proximo_turno['fecha'],
    st.session_state.proximo_turno['horario'],
    st.session_state.proximo_turno['paciente']
), unsafe_allow_html=True)

# Informaci√≥n adicional
st.markdown("---")
col1, col2 = st.columns(2)

with col1:
    st.info("üí° **Consejos de uso:**\n- Use 'Iniciar nueva sesi√≥n' para registrar sesiones\n- Las notas pueden ser extensas y detalladas\n- Los filtros ayudan a encontrar sesiones espec√≠ficas")

with col2:
    st.warning("‚ö†Ô∏è **Importante:**\n- Registre siempre la asistencia del paciente\n- Las notas son confidenciales\n- Guarde las sesiones antes de cerrar la aplicaci√≥n")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #001d4a; font-style: italic; padding: 1rem;">
    Sistema de Sesiones - Desarrollado con Streamlit
</div>
""", unsafe_allow_html=True)
